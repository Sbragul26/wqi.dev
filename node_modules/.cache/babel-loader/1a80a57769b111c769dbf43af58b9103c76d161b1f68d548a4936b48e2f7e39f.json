{"ast":null,"code":"var _jsxFileName = \"/home/sbragul26/Programs/wqi.dev/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GroundWaterPredictor() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetchGroundWaterData();\n  }, []);\n  const fetchGroundWaterData = async () => {\n    // Fetch historical ground water level data\n    const response = await fetch(\"your-geospatial-data-source-url\");\n    const result = await response.json();\n    setData(result);\n    // Use ML model here to predict ground water levels\n    const groundWaterPrediction = yourMLModel(result);\n    // Plot the predictions\n    plotGroundWaterMap(groundWaterPrediction);\n  };\n  const plotGroundWaterMap = groundWaterPrediction => {\n    // Plot predictions on a map\n    // This is just a placeholder. Use your preferred map library and data format\n  };\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [51.505, -0.09],\n    zoom: 13,\n    style: {\n      height: \"500px\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), data.map(point => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [point.latitude, point.longitude],\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: `Predicted Ground Water Level: ${point.predictedLevel}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, point.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(GroundWaterPredictor, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = GroundWaterPredictor;\nexport default GroundWaterPredictor;\nvar _c;\n$RefreshReg$(_c, \"GroundWaterPredictor\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","jsxDEV","_jsxDEV","GroundWaterPredictor","_s","data","setData","fetchGroundWaterData","response","fetch","result","json","groundWaterPrediction","yourMLModel","plotGroundWaterMap","center","zoom","style","height","width","children","url","fileName","_jsxFileName","lineNumber","columnNumber","map","point","position","latitude","longitude","predictedLevel","id","_c","$RefreshReg$"],"sources":["/home/sbragul26/Programs/wqi.dev/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\n\nfunction GroundWaterPredictor() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetchGroundWaterData();\n  }, []);\n\n  const fetchGroundWaterData = async () => {\n    // Fetch historical ground water level data\n    const response = await fetch(\"your-geospatial-data-source-url\");\n    const result = await response.json();\n    setData(result);\n    // Use ML model here to predict ground water levels\n    const groundWaterPrediction = yourMLModel(result);\n    // Plot the predictions\n    plotGroundWaterMap(groundWaterPrediction);\n  };\n\n  const plotGroundWaterMap = (groundWaterPrediction) => {\n    // Plot predictions on a map\n    // This is just a placeholder. Use your preferred map library and data format\n  };\n\n  return (\n    <MapContainer center={[51.505, -0.09]} zoom={13} style={{ height: \"500px\", width: \"100%\" }}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {data.map((point) => (\n        <Marker key={point.id} position={[point.latitude, point.longitude]}>\n          <Popup>\n            {`Predicted Ground Water Level: ${point.predictedLevel}`}\n          </Popup>\n        </Marker>\n      ))}\n    </MapContainer>\n  );\n}\n\nexport default GroundWaterPredictor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACdW,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;IAC/D,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACpCL,OAAO,CAACI,MAAM,CAAC;IACf;IACA,MAAME,qBAAqB,GAAGC,WAAW,CAACH,MAAM,CAAC;IACjD;IACAI,kBAAkB,CAACF,qBAAqB,CAAC;EAC3C,CAAC;EAED,MAAME,kBAAkB,GAAIF,qBAAqB,IAAK;IACpD;IACA;EAAA,CACD;EAED,oBACEV,OAAA,CAACL,YAAY;IAACkB,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAE;IAACC,IAAI,EAAE,EAAG;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACzFlB,OAAA,CAACJ,SAAS;MACRuB,GAAG,EAAC;IAAoD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD,CAAC,EACDpB,IAAI,CAACqB,GAAG,CAAEC,KAAK,iBACdzB,OAAA,CAACH,MAAM;MAAgB6B,QAAQ,EAAE,CAACD,KAAK,CAACE,QAAQ,EAAEF,KAAK,CAACG,SAAS,CAAE;MAAAV,QAAA,eACjElB,OAAA,CAACF,KAAK;QAAAoB,QAAA,EACH,iCAAiCO,KAAK,CAACI,cAAc;MAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD;IAAC,GAHGE,KAAK,CAACK,EAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIb,CACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEnB;AAACrB,EAAA,CArCQD,oBAAoB;AAAA8B,EAAA,GAApB9B,oBAAoB;AAuC7B,eAAeA,oBAAoB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}